{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/display.js","js/models/displays.js","js/controllers/item.js","js/models/items.js","js/controllers/main.js","js/router.js","js/controllers/users.js","js/models/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","DisplaysIndexController","Display","isOwnDisplay","display","id","getPayload","displaysIndex","all","query","DisplayShowController","deleteDisplay","displayShow","$remove","get","params","delete","isLoggedIn","isAuthenticated","DisplayEditController","Item","update","displayEdit","allItems","DisplayNewController","create","save","displayNew","res","console","log","$resource","method","ItemsIndexController","itemsIndex","ItemShowController","deleteItem","itemShow","item","ItemEditController","itemEdit","MainController","$rootScope","User","logout","secureState","e","toState","toParams","main","message","protectedStates","includes","name","parseFloat","preventDefault","currentUserId","currentUser","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UserShowController","deleteUser","userShow","UserEditController","userEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DisplaysIndexController', DisplaysIndexController)\n  .controller('DisplayShowController', DisplayShowController)\n  .controller('DisplayEditController', DisplayEditController)\n  .controller('DisplayNewController', DisplayNewController);\n\nDisplaysIndexController.$inject = ['Display', '$auth'];\nfunction DisplaysIndexController(Display, $auth) {\n  const displaysIndex = this;\n\n  displaysIndex.all = Display.query();\n\n  function isOwnDisplay(display) {\n    return display.user.id === $auth.getPayload().id;\n  }\n\n  displaysIndex.isOwnDisplay = isOwnDisplay;\n}\n\nDisplayShowController.$inject = ['Display','$state', '$auth'];\nfunction DisplayShowController(Display, $state, $auth) {\n  const displayShow = this;\n  displayShow.display = Display.get($state.params);\n\n  function deleteDisplay() {\n    displayShow.user.$remove(() => {\n      $state.go('displaysIndex');\n    });\n  }\n\n  // User.get({ id: $auth.getPayload()._id }, (user) => {\n  //   userShow.user = user;\n  // });\n\n  displayShow.delete = deleteDisplay;\n  displayShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nDisplayEditController.$inject = ['Display','$state', '$auth', 'Item'];\nfunction DisplayEditController(Display, $state, $auth, Item) {\n  const displayEdit = this;\n\n  displayEdit.display = Display.get($state.params);\n  displayEdit.allItems = Item.query();\n\n  // if(displayEdit.display.user.id !== $auth.getPayload().id) {\n  //   $state.go('displaysIndex');\n  // }\n\n  function update() {\n    Display.update({id: displayEdit.display.id}, displayEdit.display, () => {\n      $state.go('displayShow', $state.params);\n    });\n  }\n\n  displayEdit.update = update;\n  displayEdit.isLoggedIn = $auth.isAuthenticated;\n}\n\nDisplayNewController.$inject = ['Display','$state' ];\nfunction DisplayNewController(Display, $state) {\n\n  const displayNew = this;\n\n  function create () {\n    Display.save(displayNew.display, (res) => {\n      console.log('response', res);\n      $state.go('displaysIndex');\n    });\n  }\n\n  displayNew.create = create;\n}\n","angular.module('finalProject')\n  .factory('Display', Display);\n\nDisplay.$inject = ['$resource', 'API_URL'];\nfunction Display($resource, API_URL) {\n  return new $resource(`${API_URL}/displays/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ItemsIndexController', ItemsIndexController)\n  .controller('ItemShowController', ItemShowController)\n  .controller('ItemEditController', ItemEditController);\n\nItemsIndexController.$inject = ['Item'];\nfunction ItemsIndexController(Item) {\n  const itemsIndex = this;\n\n  itemsIndex.all = Item.query();\n\n}\n\nItemShowController.$inject = ['Item','$state', '$auth'];\nfunction ItemShowController(Item, $state, $auth) {\n  const itemShow = this;\n\n  itemShow.item = Item.get($state.params);\n\n  function deleteItem() {\n    itemShow.item.$remove(() => {\n      $state.go('ItemsIndex');\n    });\n  }\n\n  // User.get({ id: $auth.getPayload()._id }, (user) => {\n  //   userShow.user = user;\n  // });\n\n  itemShow.delete = deleteItem;\n  itemShow.isLoggedIn = $auth.isAuthenticated;\n}\n//\nItemEditController.$inject = ['Item','$state', '$auth'];\nfunction ItemEditController(Item, $state, $auth) {\n  const itemEdit = this;\n\n  itemEdit.item = Item.get($state.params);\n\n  function update() {\n    Item.update({id: itemEdit.item.id}, itemEdit.item, () => {\n      $state.go('itemShow', $state.params);\n    });\n  }\n\n  itemEdit.update = update;\n  itemEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction MainController($auth, $state, $rootScope, User) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('landing');\n    });\n  }\n\n  if ($auth.getPayload()){\n    main.currentUserId = $auth.getPayload().id;\n  }\n\n  main.currentUser = User.get({id: main.currentUserId });\n\n\n  const protectedStates = ['usersIndex', 'userShow', 'userEdit'];\n\n  function secureState(e, toState, toParams) {\n    // console.log(toState, toParams);\n    console.log('state id', toParams.id );\n    // console.log('user id', $auth.getPayload().id );\n\n\n    main.message = null;\n    console.log(toState, e);\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    (toState.name === 'userEdit' && parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      main.message = 'You must be logged in to go there!';\n      if ($auth.isAuthenticated()) {\n        $state.go('usersIndex');\n      } else {\n        $state.go('login');\n      }\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('landing', {\n      url: '/landing',\n      templateUrl: '/templates/landing.html'\n      // controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('userShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/userShow.html',\n      controller: 'UserShowController as userShow'\n    })\n    .state('userEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/userEdit.html',\n      controller: 'UserEditController as userEdit'\n    })\n    .state('displaysIndex', {\n      url: '/displays',\n      templateUrl: '/templates/displaysIndex.html',\n      controller: 'DisplaysIndexController as displaysIndex'\n    })\n    .state('displayNew', {\n      url: '/displays/new',\n      templateUrl: '/templates/displayNew.html',\n      controller: 'DisplayNewController as displayNew'\n    })\n    .state('displayShow', {\n      url: '/displays/:id',\n      templateUrl: '/templates/displayShow.html',\n      controller: 'DisplayShowController as displayShow'\n    })\n    .state('displayEdit', {\n      url: '/displays/:id/edit',\n      templateUrl: '/templates/displayEdit.html',\n      controller: 'DisplayEditController as displayEdit'\n    })\n    .state('itemsIndex', {\n      url: '/items',\n      templateUrl: '/templates/itemsIndex.html',\n      controller: 'ItemsIndexController as itemsIndex'\n    })\n    .state('itemShow', {\n      url: '/items/:id',\n      templateUrl: '/templates/itemShow.html',\n      controller: 'ItemShowController as itemShow'\n    })\n    .state('itemEdit', {\n      url: '/items/:id/edit',\n      templateUrl: '/templates/itemEdit.html',\n      controller: 'ItemEditController as itemEdit'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UserShowController', UserShowController)\n  .controller('UserEditController', UserEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n\n}\n\nUserShowController.$inject = ['User','$state', '$auth'];\nfunction UserShowController(User, $state, $auth) {\n  const userShow = this;\n\n  userShow.user = User.get($state.params);\n\n  function deleteUser() {\n    userShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  // User.get({ id: $auth.getPayload()._id }, (user) => {\n  //   userShow.user = user;\n  // });\n\n  userShow.delete = deleteUser;\n  userShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUserEditController.$inject = ['User','$state', '$auth'];\nfunction UserEditController(User, $state, $auth) {\n  const userEdit = this;\n\n  userEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: userEdit.user.id}, userEdit.user, () => {\n      $state.go('userShow', $state.params);\n    });\n  }\n\n  userEdit.update = update;\n  userEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}