{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/display.js","js/models/displays.js","js/controllers/item.js","js/models/items.js","js/controllers/main.js","js/router.js","js/controllers/users.js","js/models/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","DisplaysIndexController","Display","displaysIndex","all","query","DisplayShowController","deleteDisplay","displayShow","$remove","display","get","params","delete","isLoggedIn","isAuthenticated","DisplayEditController","update","id","displayEdit","$resource","method","ItemsIndexController","Item","itemsIndex","ItemShowController","deleteItem","itemShow","item","MainController","$rootScope","User","logout","secureState","e","toState","toParams","console","log","main","message","protectedStates","includes","name","parseFloat","getPayload","preventDefault","currentUserId","currentUser","$on","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UserShowController","deleteUser","userShow","UserEditController","userEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('DisplaysIndexController', DisplaysIndexController)\n  .controller('DisplayShowController', DisplayShowController)\n  .controller('DisplayEditController', DisplayEditController);\n\nDisplaysIndexController.$inject = ['Display'];\nfunction DisplaysIndexController(Display) {\n  const displaysIndex = this;\n\n  displaysIndex.all = Display.query();\n\n}\n\nDisplayShowController.$inject = ['Display','$state', '$auth'];\nfunction DisplayShowController(Display, $state, $auth) {\n  const displayShow = this;\n\n  displayShow.display = Display.get($state.params);\n\n  function deleteDisplay() {\n    displayShow.user.$remove(() => {\n      $state.go('displaysIndex');\n    });\n  }\n\n  // User.get({ id: $auth.getPayload()._id }, (user) => {\n  //   userShow.user = user;\n  // });\n\n  displayShow.delete = deleteDisplay;\n  displayShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nDisplayEditController.$inject = ['Display','$state', '$auth'];\nfunction DisplayEditController(Display, $state, $auth) {\n  const displayEdit = this;\n\n  displayEdit.display = Display.get($state.params);\n\n  function update() {\n    Display.update({id: displayEdit.display.id}, displayEdit.display, () => {\n      $state.go('displayShow', $state.params);\n    });\n  }\n\n  displayEdit.update = update;\n  displayEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('Display', Display);\n\nDisplay.$inject = ['$resource', 'API_URL'];\nfunction Display($resource, API_URL) {\n  return new $resource(`${API_URL}/displays/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ItemsIndexController', ItemsIndexController)\n  .controller('ItemShowController', ItemShowController);\n  // .controller('DisplayEditController', DisplayEditController);\n\nItemsIndexController.$inject = ['Item'];\nfunction ItemsIndexController(Item) {\n  const itemsIndex = this;\n\n  itemsIndex.all = Item.query();\n\n}\n\nItemShowController.$inject = ['Item','$state', '$auth'];\nfunction ItemShowController(Item, $state, $auth) {\n  const itemShow = this;\n\n  itemShow.item = Item.get($state.params);\n\n  function deleteItem() {\n    itemShow.item.$remove(() => {\n      $state.go('ItemsIndex');\n    });\n  }\n\n  // User.get({ id: $auth.getPayload()._id }, (user) => {\n  //   userShow.user = user;\n  // });\n\n  itemShow.delete = deleteItem;\n  itemShow.isLoggedIn = $auth.isAuthenticated;\n}\n//\n// DisplayEditController.$inject = ['Display','$state', '$auth'];\n// function DisplayEditController(Display, $state, $auth) {\n//   const displayEdit = this;\n//\n//   displayEdit.user = Display.get($state.params);\n//\n//   function update() {\n//     Display.update({id: displayEdit.user.id}, displayEdit.user, () => {\n//       $state.go('displayShow', $state.params);\n//     });\n//   }\n//\n//   displayEdit.update = update;\n//   displayEdit.isLoggedIn = $auth.isAuthenticated;\n// }\n","angular.module('finalProject')\n  .factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction MainController($auth, $state, $rootScope, User) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('landing');\n    });\n  }\n\n  if ($auth.getPayload()){\n    main.currentUserId = $auth.getPayload().id;\n  }\n\n  main.currentUser = User.get({id: main.currentUserId });\n\n\n  const protectedStates = ['usersIndex', 'userShow', 'userEdit'];\n\n  function secureState(e, toState, toParams) {\n    // console.log(toState, toParams);\n    console.log('state id', toParams.id );\n    // console.log('user id', $auth.getPayload().id );\n\n\n    main.message = null;\n    console.log(toState, e);\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    (toState.name === 'userEdit' && parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      main.message = 'You must be logged in to go there!';\n      if ($auth.isAuthenticated()) {\n        $state.go('usersIndex');\n      } else {\n        $state.go('login');\n      }\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('landing', {\n      url: '/landing',\n      templateUrl: '/templates/landing.html'\n      // controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('userShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/userShow.html',\n      controller: 'UserShowController as userShow'\n    })\n    .state('userEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/userEdit.html',\n      controller: 'UserEditController as userEdit'\n    })\n    .state('displaysIndex', {\n      url: '/displays',\n      templateUrl: '/templates/displaysIndex.html',\n      controller: 'DisplaysIndexController as displaysIndex'\n    })\n    .state('displayShow', {\n      url: '/displays/:id',\n      templateUrl: '/templates/displayShow.html',\n      controller: 'DisplayShowController as displayShow'\n    })\n    .state('displayEdit', {\n      url: '/displays/:id',\n      templateUrl: '/templates/displayEdit.html',\n      controller: 'DisplayEditController as displayEdit'\n    })\n    .state('itemsIndex', {\n      url: '/items',\n      templateUrl: '/templates/itemsIndex.html',\n      controller: 'ItemsIndexController as itemsIndex'\n    })\n    .state('itemShow', {\n      url: '/items/:id',\n      templateUrl: '/templates/itemShow.html',\n      controller: 'ItemShowController as itemShow'\n    })\n    ;\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UserShowController', UserShowController)\n  .controller('UserEditController', UserEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n\n}\n\nUserShowController.$inject = ['User','$state', '$auth'];\nfunction UserShowController(User, $state, $auth) {\n  const userShow = this;\n\n  userShow.user = User.get($state.params);\n\n  function deleteUser() {\n    userShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  // User.get({ id: $auth.getPayload()._id }, (user) => {\n  //   userShow.user = user;\n  // });\n\n  userShow.delete = deleteUser;\n  userShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUserEditController.$inject = ['User','$state', '$auth'];\nfunction UserEditController(User, $state, $auth) {\n  const userEdit = this;\n\n  userEdit.user = User.get($state.params);\n\n  function update() {\n    User.update({id: userEdit.user.id}, userEdit.user, () => {\n      $state.go('userShow', $state.params);\n    });\n  }\n\n  userEdit.update = update;\n  userEdit.isLoggedIn = $auth.isAuthenticated;\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n"]}